<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>2 - basic</title>
    <sect2>
        <title>2.1 - install and config</title>
        <para>源码在http://git-scm.com/download，也可以通过git获取：</para>
        <programlisting><![CDATA[
    $ git clone git://git.kernel.org/pub/scm/git/git.git
        ]]></programlisting>
        <para>apt和yum中的包名均为git-core，mac os x可通过macports安装（git-core），windows则用<ulink url="http://code.google.com/p/msysgit">msysGit</ulink>安装。</para>
        <para>git有3级配置文件，系统级的/etc/gitconfig对所有用户有效，用户全局的~/.gitconfig仅对该用户有效，.git/config则仅对该仓库有效；配置的有效性越广，优先级就越低。可以通过git config命令配置，系统级和用户级分别对应--system和--global选项，不带选项的配置保存在当前仓库的.git/config中。</para>
        <programlisting><![CDATA[
    $ git config --global user.name 'zjz'
    $ git config --global user.email 'zjz@zhang.com'
    $ git config --global color.ui=true
    $ git config --global core.editor vi
    // - 使得git调用的分页器换行（缺省截断行）
    $ git config --global core.pager 'less -+$LESS -FRX'

    $ git config --list
    $ git config user.name

    $ git help config

    $ git config --global alias.co checkout
    $ git config --global alias.br branch
    $ git config --global alias.ci commit
    $ git config --global alias.st status
    $ git config --global alias.unstage 'reset HEAD --'
        ]]></programlisting>
        <para>git源码中的contrib/completion/git-completion.bash是git的命令行自动完成脚本，如果已安装了bash_completion，则将该脚本复制到其指定的脚本目录即可（mac os x可通过macports安装bash-completion，脚本目录为/opt/local/etc/bash_completion.d/。注意，bash_completion通常需要在.profile或.bashrc中运行bash_completion脚本，测试发现，macports的该脚本（/opt/local/etc/bash_completion）与fink的初始化脚本（/sw/bin/init.sh）冲突，需要在fink的初始化脚本之后运行才能生效）。</para>
    </sect2>
    <sect2>
        <title>2.2 - update and commit</title>
        <programlisting><![CDATA[
    // - 新建仓库（.git），当前目录即为工作目录
    $ git init

    // - 查看工作目录的状态，包括未更新的改变（changed but not updated），已更新
    // - 待提交的改变（changes to be commited），以及cache中没有的文件
    // - （untracked files）
    $ git status

    // - 将指定文件或目录（在子目录中递归）中的所有文件加入cache，如果文件已在
    // - cache中，则更新
    $ git add .
    // - 从cache和工作目录中删除文件
    $ git rm test
    // - 仅从cache中删除
    $ git rm --cached test
    // - 如果文件未更新，需要强制删除
    $ git rm -f test
    // - 在cache和工作目录中改名
    $ git mv test test1
    // - 撤销对cache中文件（未指定则对所有）的最后一次更新
    $ git reset HEAD test
    // - 从cache中签出文件（覆盖工作目录中的文件）
    $ git checkout -- test
    // - 显示cache中的文件信息列表
    $ git ls-files --stage

    // - 工作目录与cache的diff，还可以指定文件名或目录名
    $ git diff
    // - cache与当前快照的diff
    $ git diff --cached
    // 也可直接使用commit的hash key
    $ git diff 9464 0367
    $ git diff 0367

    // - .gitignore中包含被忽略的文件模式列表，匹配的文件不会列为untracked
    // - files，也不会被加入cache（除非用-f选项强制加入）
    $ cat .gitignore
    .gitignore
    *.tmp

    // - 将cache作为新快照提交（到当前分支），--amend选项替换当前版本
    $ git commit -m 'initialization'
    // - 更新cache后提交
    $ git commit -a -m '1 - xxx completed'

    // - 显示（当前分支的）提交日志，-p选项显示提交的diff，-2表示最近两次提交
    $ git log -p -2
    // - 每次提交显示一行
    $ git log --pretty=oneline
    // - 指定显示格式，--graph选项显示ascii图形表示的分支合并历史
    $ git log --pretty=format:"%h: %s" --graph
    // - 指定查询条件
    $ git log --pretty=format:"%h: %s" --author=gitster --since="2008-10-01" --before="2008-11-01" --no-merges -- t/
    // - gui版log
    $ gitk
        ]]></programlisting>
    </sect2>
</sect1>
